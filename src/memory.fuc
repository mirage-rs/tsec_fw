// Copyright (C) 2020  The Mirage Authors
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

.equ #CODE_INDEX 0x6000
.equ #CODE       0x6100

// Function arguments
pushdef(`destination', `$r10')
pushdef(`source', `$r11')
pushdef(`size', `$r12')

// Locals
pushdef(`code_offset', `$r13')
pushdef(`position', `$r14')
pushdef(`code_word', `$r15')

//
// Copies code from the Falcon IMEM to the Falcon DMEM via a memcpy operation.
//
// Arguments:
//   $r10 - The destination address in DMEM.
//   $r11 - The source address in IMEM.
//   $r12 - The amount of bytes to copy.
//
// Destroys $r9-$r15.
//
memcpy_i2d:
    // Write the physical IMEM address to the CODE_INDEX MMIO register
    // and set the read address autoincrement bit for sequential reads.
    mov $r9 0x2000000
    or source $r9
    mov $r9 #CODE_INDEX
    iowr I[$r9] source

    // Prepare a few registers for the code copy loop and branch into it.
    clear b32 position
    mov source #CODE
    clear b32 code_offset
    lbra #memcpy_i2d_loop_compare
    memcpy_i2d_loop_copy:
        // Read a code word through the CODE MMIO register, increment the current
        // position for the loop and write it to the destination address in DMEM.
        iord code_word I[source + code_offset * 0x4]
        shr b32 $r9 position 0x2
        add b32 position position 0x4
        st b32 D[destination + $r9 * 0x4] code_word
    memcpy_i2d_loop_compare:
        // Compare the current position to the size that needs to be copied.
        // If enough words were copied already, opt out of the loop.
        cmp b32 position size
        bra b #memcpy_i2d_loop_copy

    ret

popdef(`code_word')
popdef(`position')
popdef(`code_offset')

popdef(`size')
popdef(`source')
popdef(`destination')
