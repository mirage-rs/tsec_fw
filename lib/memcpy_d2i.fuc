// Copyright (C) 2020  The Mirage Authors
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// Function arguments
pushdef(`phys_dest', `$r10')
pushdef(`src', `$r11')
pushdef(`size', `$r12')
pushdef(`virt_dest', `$r13')
pushdef(`is_secret', `$r14')

// Locals
pushdef(`scratch_register', `$r9')

//
// Maps a given source buffer from DMEM to chosen physical and virtual addresses in DMEM.
//
// Arguments:
//   $r10 - The physical destination address in IMEM.
//   $r11 - The start address of the source buffer in DMEM.
//   $r12 - The size of the source buffer.
//   $r13 - The virtual destination address in IMEM.
//   $r14 - Whether the pages should be tagged as secret.
//
memcpy_d2i:
    mpush $r0

    mov b32 $r0 src
    mov b32 $r11 size
    mov b32 $r12 virt_dest

    bra b8 $r0 0x0 ne #memcpy_d2i_invalid_arguments
    bra b8 $r11 0x0 ne #memcpy_d2i_invalid_arguments
    bra b8 $r12 0x0 ne #memcpy_d2i_invalid_arguments

    bra b32 is_secret 0x0 e #memcpy_d2i_not_secret
    mov scratch_register 0x11000000
    lbra #memcpy_d2i_start_copy

memcpy_d2i_not_secret:
    mov scratch_register 0x1000000

memcpy_d2i_start_copy:
    or scratch_register phys_dest scratch_register
    mov $r15 #FALCON_IMEMC0
    iowr I[$r15] scratch_register
    mov b32 $r10 $r0
    lcall #__memcpy_d2i_inner
    mpopret $r0

memcpy_d2i_invalid_arguments:
    exit
memcpy_d2i_invalid_arguments_spin_exit:
    lbra #memcpy_d2i_invalid_arguments_spin_exit

// End function arguments
popdef(`is_secret')
popdef(`virt_dest')
popdef(`size')
popdef(`phys_dest')

// End locals
popdef(`scratch_register')

// Function arguments
pushdef(`src', `$r10')
pushdef(`size', `$r11')
pushdef(`virt_dest', `$r12')

__memcpy_d2i_inner:
    mpush $r3

    mov $r13 #FALCON_IMEMD0
    mov $r14 #FALCON_IMEMT0
    lbra #__memcpy_d2i_inner_loop_compare

__memcpy_d2i_inner_loop_secure:
    // Check if current page is already fully mapped.
    and $r0 virt_dest 0xFF
    bra z #__memcpy_d2i_inner_handle_virt_page

__memcpy_d2i_inner_loop:
    // Write one block to the code transfer window.
    ld b32 $r0 D[src + 0x0]
    ld b32 $r1 D[src + 0x4]
    ld b32 $r2 D[src + 0x8]
    ld b32 $r3 D[src + 0xc]
    iowr I[$r13] $r0
    iowr I[$r13] $r1
    iowr I[$r13] $r2
    iowr I[$r13] $r3

    // Increment state for next iteration of the loop.
    add b32 src 0x10
    sub b32 size 0x10
    add b32 virt_dest 0x10

__memcpy_d2i_inner_loop_compare:
    bra b32 size 0x0 ne #__memcpy_d2i_inner_loop_secure
    mpopret $r3

__memcpy_d2i_inner_handle_virt_page:
    // Write virtual page index to the IMEM window configuration.
    shr b32 $r0 virt_dest 0x8
    iowr I[$r14] $r0
    lbra #__memcpy_d2i_inner_loop

// End function arguments
popdef(`virt_dest')
popdef(`size')
popdef(`src')
