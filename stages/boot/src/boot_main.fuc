// Copyright (C) 2020  The Mirage Authors
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

.section `#'boot_stage_code _START_ADDR

// Key data offsets
.equ #KEY_DATA_BOOT_SIZE        0x70
.equ #KEY_DATA_KEYGENLDR_SIZE   0x74
.equ #KEY_DATA_KEYGEN_SIZE      0x78
.equ #KEY_DATA_SECUREBOOT_SIZE  0x80

_start:
    // Extract the size of the Falcon DMEM segment from MMIO
    // and initialize the stack pointer to the end of it.
    mov $r13 #FALCON_HWCFG
    iord $r13 I[$r13]
    shr b32 $r13 0x9
    and $r13 0x1FF
    shl b32 $r13 0x8
    mov $sp $r13

    lcall #main

    exit

// Locals
pushdef(`key_data_buffer', `$r10')
pushdef(`key_data_address', `$r11')
pushdef(`key_data_size', `$r12')
pushdef(`key_data_start', `$r0')
pushdef(`blob0_size', `$r9')
pushdef(`blob1_size', `$r15')
pushdef(`blob2_size', `$r14')
pushdef(`blob4_size', `$r13')
pushdef(`blob3_address', `$r9')

main:
    mov $r9 -0x10
    mov key_data_address _KEY_DATA_ADDR
    mov key_data_size _KEY_DATA_SIZE

    // Set up the stack.
    add $sp -0x94
    mpush key_data_start

    // Copy the Key Data blob from IMEM onto the stack.
    mov key_data_start $sp
    add b32 key_data_start key_data_start 0x14
    and key_data_start $r9
    mov b32 key_data_buffer key_data_start
    lcall #memcpy_i2d

    // Extract the sizes of the individual stages from the Key Data buffer.
    ld b32 blob4_size D[key_data_start + #KEY_DATA_SECUREBOOT_SIZE]
    ld b32 blob0_size D[key_data_start + #KEY_DATA_BOOT_SIZE]
    ld b32 blob1_size D[key_data_start + #KEY_DATA_KEYGENLDR_SIZE]
    ld b32 blob2_size D[key_data_start + #KEY_DATA_KEYGEN_SIZE]

    // Sum up the stage sizes to get the start address of the next stage.
    add b32 blob3_address blob0_size blob1_size
    add b32 blob3_address _KEY_DATA_ALIGNED_SIZE
    add b32 blob3_address blob3_address blob2_size
    add b32 blob3_address blob3_address blob4_size

    // Jump to the start of the SecureBootLdr blob.
    call blob3_address

    // Clean up and return to init code.
    clear b32 key_data_buffer
    mpopaddret key_data_start 0x94

// End locals
popdef(`blob3_address')
popdef(`blob4_size')
popdef(`blob2_size')
popdef(`blob1_size')
popdef(`blob0_size')
popdef(`key_data_start')
popdef(`key_data_size')
popdef(`key_data_address')
popdef(`key_data_buffer')

include(`mmio.fuc')
include(`memcpy_i2d.fuc')

// XXX: NVIDIA does this to preserve compatibility with legacy KeygenLdr and Keygen.
// Since we need to have an identical Keygen to generate the same keys, we use their
// size offsets as well to save us trouble with memory mappings.
.size 0x300
