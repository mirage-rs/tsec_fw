// Copyright (C) 2020  The Mirage Authors
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// Host1X Read/Write results
.equ #HOST1X_DMA_SUCCESS 0x0
.equ #HOST1X_DMA_FAILURE 0x1

// Host1X magic value
.equ #HOST1X_MAGIC_VALUE 0x34C2E1DA

// Check Host1X magic results
.equ #HOST1X_MAGIC_VALID   0x00
.equ #HOST1X_MAGIC_INVALID 0xDEADBEEF

// BAR0 Control status codes
.equ #TSEC_BAR0_CTL_STATUS_IDLE     0x0
.equ #TSEC_BAR0_CTL_STATUS_BUSY     0x1
.equ #TSEC_BAR0_CTL_STATUS_ERROR    0x2
.equ #TSEC_BAR0_CTL_STATUS_DISABLED 0x3

//
// Waits until BAR0 has finished currently running DMA transfers between
// TSEC and Host1X and passes back the status code of the operation.
//
// Returns:
//   $r10 - The status code of the BAR0 engine for the last DMA transfer.
//
host1x_dma_wait_busy:
    // Save the TSEC_BAR0_CTL_STATUS_BUSY to the stack for later.
    push $r8
    mov $r8 $sp
    add $sp -0x10
    sub b32 $r15 $r8 0xC
    mov $r9 #TSEC_BAR0_CTL_STATUS_BUSY
    st b32 D[$r15] $r9

    // Begin the check using the 'busy' status.
    lbra #host1x_dma_wait_busy_begin_loop

host1x_dma_wait_busy_loop_body:
    // Store the TSEC_BAR0_CTL address on the stack.
    sub b32 $r15 $r8 0x8
    mov $r9 #TSEC_BAR0_CTL
    st b32 D[$r15] $r9

    // Read the TSEC_BAR0_CTL address back into the same register.
    sub b32 $r9 $r8 0x8
    ld b32 $r9 D[$r9]

    // Read the TSEC_BAR0_CTL register and store the value on the stack.
    iord $r15 I[$r9]
    sub b32 $r9 $r8 0x4
    st b32 D[$r9] $r15

    // Read the TSEC_BAR0_CTL value back into the same register.
    sub b32 $r9 $r8 0x4
    ld b32 $r9 D[$r9]

    // Store the TSEC_BAR0_CTL value on the stack again.
    mov b32 $r15 $r9
    sub b32 $r8 $r8 0x10
    st b32 D[$r9] $r15

    // Extract the TSEC_BAR0_CTL status code and store it on stack.
    sub b32 $r9 $r8 0x10
    ld b32 $r9 D[$r9]
    shr b32 $r9 0xC
    sub b32 $r15 $r8 0xC
    and $r9 0x7
    st b32 D[$r15] $r9

host1x_dma_wait_busy_begin_loop:
    // Read the control status code back from the stack.
    sub b32 $r9 $r8 0xC
    ld b32 $r9 D[$r9]

    // Check if BAR0 is still busy processing DMA transfers and re-check.
    cmp b32 $r9 #TSEC_BAR0_CTL_STATUS_BUSY
    bra z #host1x_dma_wait_busy_loop_body

    // Copy the resulting status to $r10 when BAR0 is done.
    sub b32 $r9 $r8 0xC
    ld b32 $r9 D[$r9]
    mov b32 $r10 $r9

    // Destroy the stack frame.
    mov $sp $r8
    pop $r8

    ret

// Function arguments
pushdef(`address', `$r10')
pushdef(`output', `$r11')

// Locals
pushdef(`host1x_status', `$r15')

//
// Reads a value from the given address using the BAR0 Host1X DMA interface
// as a secure transfer route.
//
// Arguments:
//   $r10 - The address to read from.
//   $r11 - The address in DMEM to write the transferred value to.
//
// Returns:
//   $r10 - The result code, either #HOST1X_DMA_SUCCESS or #HOST1X_DMA_FAILURE.
//
host1x_dma_read:
    // Back up the function arguments on the stack.
    push $r8
    mov $r8 $sp
    add $sp -0x1C
    sub b32 $r9 $r8 0x14
    st b32 D[$r9] address
    sub b32 $r9 $r8 0x18
    st b32 D[$r9] output

    // Wait until BAR0 is in idle and store its status code on the stack.
    lcall #host1x_dma_wait_busy
    mov b32 host1x_status $r10
    sub b32 $r9 $r8 0xC
    st b32 D[$r9] host1x_status

    // Check if the operation in BAR0 completed successfully.
    sub b32 $r9 $r8 0xC
    ld b32 $r9 D[$r9]
    cmp b32 $r9 #TSEC_BAR0_CTL_STATUS_IDLE
    bra z #__host1x_dma_read_bar0_success_1

    // Read back the BAR0 result and store it at a different stack offset.
    sub b32 $r9 $r8 0xC
    ld b32 host1x_status D[$r9]
    sub b32 $r14 $r8 0x1C
    st b32 D[$r14] host1x_status

    lbra #__host1x_dma_read_bar0_error

__host1x_dma_read_bar0_success_1:
    // Configure the target address for a DMA read from Host1X.
    sub b32 $r9 $r8 0x14
    mov $r10 #TSEC_BAR0_ADDR
    ld b32 $r11 D[$r9]
    lcall #fancy_iowr

    // Zero out TSEC_BAR0_DATA for a read operation.
    mov $r10 #TSEC_BAR0_DATA
    clear b32 $r11
    lcall #fancy_iowr

    // Save the BAR0 configuration to the stack.
    // 0x800000F1 = Read + Init + 0xF byte mask
    sub b32 $r15 $r8 0x10
    mov $r9 0x800000F1
    st b32 D[$r15] $r9

    // Read back the BAR0 configuration and commit it to BAR0.
    sub b32 $r9 $r8 0x10
    mov $r10 #TSEC_BAR0_CTL
    ld b32 $r11 D[$r9]
    lcall #fancy_iowr

    // Wait until BAR0 is in idle and store its status code on the stack.
    lcall #host1x_dma_wait_busy
    mov b32 host1x_status $r10
    sub b32 $r9 $r8 0xC
    st b32 D[$r9] host1x_status

    // Check if the operation in BAR0 completed successfully.
    sub b32 $r9 $r8 0xC
    ld b32 $r9 D[$r9]
    cmp b32 $r9 #TSEC_BAR0_CTL_STATUS_IDLE
    bra z #__host1x_dma_read_bar0_success_2

    // Read back the BAR0 result and store it at a different stack offset.
    sub b32 $r9 $r8 0xC
    ld b32 host1x_status D[$r9]
    sub b32 $r14 $r8 0x1C
    st b32 D[$r14] host1x_status

    lbra #__host1x_dma_read_bar0_error

__host1x_dma_read_bar0_success_2:
    // Save the TSEC_BAR0_DATA address to the stack.
    sub b32 $r15 $r8 0x8
    mov $r9 #TSEC_BAR0_DATA
    st b32 D[$r15] $r9

    // Read back the address and read the value of TSEC_BAR0_DATA.
    sub b32 $r9 $r8 0x8
    ld b32 $r9 D[$r9]
    iord output I[$r9]

    // Store the transferred value on the stack.
    sub b32 $r9 $r8 0x4
    st b32 D[$r9] output

    // Read the value back from the stack.
    sub b32 $r9 $r8 0x4
    ld b32 $r9 D[$r9]
    mov b32 output $r9

    // Read the output address from the stack and store the transferred value there.
    sub b32 $r9 $r8 0x18
    ld b32 $r9 D[$r9]
    st b32 D[$r9] output

    // Store a success result code on the stack as the return value.
    clear b32 $r14
    sub b32 $r9 $r8 0x1C
    st b32 D[$r9] $r14

__host1x_dma_read_bar0_error:
    // Load the result code into the output register.
    sub b32 $r15 $r8 0x1C
    ld b32 $r9 D[$r15]
    mov b32 $r10 $r9

    // Destroy the stack frame.
    mov $sp $r8
    pop $r8

    ret

// End locals
popdef(`host1x_status')

// End function arguments
popdef(`output')
popdef(`address')

// Function arguments
pushdef(`address', `$r10')
pushdef(`value', `$r11')

// Locals
pushdef(`local_address', `$r15')
pushdef(`local_value', `$r9')

//
// A fancy iowr implementation that allocates arguments on the stack for nothing. It really
// lowers down to an iowr primitive using the supplied arguments and that's it.
//
// Arguments:
//   $r10 - The address to write to.
//   $r11 - The value to write.
//
fancy_iowr:
    // Allocate both arguments on the stack.
    push $r8
    mov $r8 $sp
    add $sp -0x8
    sub b32 $r9 $r8 0x4
    st b32 D[$r9] address
    sub b32 $r9 $r8 0x8
    st b32 D[$r9] value

    // Read the arguments from stack back into different registers.
    // (A simple mov would've got the job done too, but well...)
    sub b32 $r9 $r8 0x4
    ld b32 local_address D[$r9]
    sub b32 $r9 $r8 0x8
    ld b32 local_value D[$r9]

    // Write the value to the given address in I/O space.
    iowr I[local_address] local_value

    // Destroy the stack frame.
    mov $sp $r8
    pop $r8

    ret

// End locals
popdef(`local_value')
popdef(`local_address')

// End function arguments
popdef(`value')
popdef(`address')

// Function arguments
pushdef(`address', `$r10')
pushdef(`value', `$r11')

// Locals
pushdef(`host1x_status', `$r15')

//
// Writes a value to a given address using the BAR0 Host1X DMA interface
// as a secure transfer route.
//
// Arguments:
//   $r10 - The address to write to.
//   $r11 - The value to write.
//
// Returns:
//   $r10 - The result code, either #HOST1X_DMA_SUCCESS or #HOST1X_DMA_FAILURE.
//
host1x_dma_write:
    // Store the write address on the stack.
    push $r8
    mov $r8 $sp
    add $sp -0x14
    sub b32 $r9 $r8 0xC
    st b32 D[$r9] address

    // Store the value to write on the stack.
    sub b32 $r9 $r8 0x10
    st b32 D[$r9] value

    // Wait until BAR0 is in idle and store its status code on the stack.
    lcall #host1x_dma_wait_busy
    mov b32 host1x_status $r10
    sub b32 $r9 $r8 0x4
    st b32 D[$r9] host1x_status

    // Read back the status code and make sure no error occurred.
    sub b32 $r9 $r8 0x4
    ld b32 $r9 D[$r9]
    cmp b32 $r9 #TSEC_BAR0_CTL_STATUS_IDLE
    bra nz #__host1x_dma_write_bar0_error_1

    // Load in the address argument from the stack as the base address for DMA.
    sub b32 $r9 $r8 0xC
    mov $r10 #TSEC_BAR0_ADDR
    ld b32 $r11 D[$r9]
    lcall #fancy_iowr

    // Load in the value argument from the stack as the value to transfer.
    sub b32 $r9 $r8 0x10
    mov $r10 #TSEC_BAR0_DATA
    ld b32 $r11 D[$r9]
    lcall #fancy_iowr

    // Save the BAR0 configuration to the stack.
    // 0x800000F2 = Write + Init + 0xF byte mask
    sub b32 $r15 $r8 0x8
    mov $r9 0x800000F2
    st b32 D[$r15] $r9

    // Read the BAR0 configuration value back and commit it to BAR0.
    sub b32 $r9 $r8 0x8
    mov $r10 #TSEC_BAR0_CTL
    ld b32 $r11 D[$r9]
    lcall #fancy_iowr

    // Wait until BAR0 is in idle and store its status code on the stack.
    lcall #host1x_dma_wait_busy
    mov b32 host1x_status $r10
    sub b32 $r9 $r8 0x4
    st b32 D[$r9] host1x_status

__host1x_dma_write_bar0_error_1:
    // Check if BAR0 completed the operation successfully.
    sub b32 $r9 $r8 0x4
    ld b32 $r9 D[$r9]
    cmp b32 $r9 #TSEC_BAR0_CTL_STATUS_IDLE
    bra z #__host1x_dma_write_bar0_success

    // Store a failure result code on the stack as the return value.
    mov $r15 #HOST1X_DMA_FAILURE
    sub b32 $r9 $r8 0x14
    st b32 D[$r9] $r15
    lbra #__host1x_dma_write_bar0_error_2

__host1x_dma_write_bar0_success:
    // Store a success result code on the stack as the return value.
    clear b32 $r15
    sub b32 $r9 $r8 0x14
    st b32 D[$r9] $r15

__host1x_dma_write_bar0_error_2:
    // Load the result code into the output register.
    sub b32 $r15 $r8 0x14
    ld b32 $r9 D[$r15]
    mov b32 $r10 $r9

    // Destroy the stack frame.
    mov $sp $r8
    pop $r8

    ret

// End locals
popdef(`host1x_status')

// End function arguments
popdef(`value')
popdef(`address')

// Function arguments
pushdef(`timeout', `$r10')

//
// Sets a timeout for DMA transfers on the BAR0 between TSEC and Host1X.
//
// Arguments:
//   $r10 - The timeout value to configure.
//
host1x_dma_set_timeout:
    // Store the timeout value on the stack.
    push $r8
    mov $r8 $sp
    add $sp -0x4
    sub b32 $r9 $r8 0x4
    st b32 D[$r9] timeout

    // Read back the timeout value and configure it as the timeout for BAR0.
    sub b32 $r9 $r8 0x4
    mov $r10 #TSEC_BAR0_TIMEOUT
    ld b32 $r11 D[$r9]
    lcall #fancy_iowr

    // Destroy the stack frame.
    mov $sp $r8
    pop $r8

    ret

// End function arguments
popdef(`timeout')

// Function arguments
pushdef(`key_buffer', `$r10')

// Locals
pushdef(`host1x_result', `$r15')

//
// Transfers a buffer containing an 128-bit key to SOR1 MMIOs using the
// BAR0 Host1X DMA interface as a secure transfer route.
//
// Arguments:
//   $r10 - The start address of the key buffer in DMEM.
//
// Returns:
//   $r10 - The result code of the DMA operations, either #HOST1X_DMA_SUCCESS or
//          #HOST1X_DMA_FAILURE.
//
sor1_set_key:
    // Back up the function argument on the stack.
    push $r8
    mov $r8 $sp
    add $sp -0xC
    sub b32 $r9 $r8 0x8
    st b32 D[$r9] key_buffer

    // Clear the stack location for the result code.
    sub b32 $r15 $r8 0x4
    clear b32 $r9
    st b32 D[$r15] $r9

    // Set a timeout for Host1X DMA transfers.
    mov $r10 0xFFF
    lcall #host1x_dma_set_timeout

    // Write the first word of the key to SOR1.
    sub b32 $r9 $r8 0x8
    ld b32 $r9 D[$r9]
    ld b32 $r9 D[$r9]
    mov $r10 #SOR_NV_PDISP_SOR_DP_HDCP_BKSV_LSB
    mov b32 $r11 $r9
    lcall #host1x_dma_write

    // Store the Host1X result code on the stack.
    mov b32 host1x_result $r10
    sub b32 $r9 $r8 0x4
    st b32 D[$r9] host1x_result

    // Make sure the Host1X transfer was successful.
    sub b32 $r9 $r8 0x4
    ld b32 $r9 D[$r9]
    cmp b32 $r9 #HOST1X_DMA_SUCCESS
    bra z #__sor1_set_key_dma_success_1

    // Store the Host1X result code at a different stack offset.
    sub b32 $r9 $r8 0x4
    ld b32 host1x_result D[$r9]
    sub b32 $r14 $r8 0xC
    st b32 D[$r14] host1x_result

    lbra #__sor1_set_key_dma_failure

__sor1_set_key_dma_success_1:
    // Write the second word of the key to SOR1.
    sub b32 $r9 $r8 0x8
    ld b32 $r9 D[$r9]
    add b32 $r9 $r9 0x4
    ld b32 $r9 D[$r9]
    mov $r10 #SOR_NV_PDISP_SOR_TMDS_HDCP_BKSV_LSB
    mov b32 $r11 $r9
    lcall #host1x_dma_write

    // Store the Host1X result code on the stack.
    mov b32 host1x_result $r10
    sub b32 $r9 $r8 0x4
    st b32 D[$r9] host1x_result

    // Make sure the Host1X transfer was successful.
    sub b32 $r9 $r8 0x4
    ld b32 $r9 D[$r9]
    cmp b32 $r9 #HOST1X_DMA_SUCCESS
    bra z #__sor1_set_key_dma_success_2

    // Store the Host1X result code at a different stack offset.
    sub b32 $r9 $r8 0x4
    ld b32 host1x_result D[$r9]
    sub b32 $r14 $r8 0xC
    st b32 D[$r14] host1x_result

    lbra #__sor1_set_key_dma_failure

__sor1_set_key_dma_success_2:
    // Write the third word of the key to SOR1.
    sub b32 $r9 $r8 0x8
    ld b32 $r9 D[$r9]
    add b32 $r9 $r9 0x8
    ld b32 $r9 D[$r9]
    mov $r10 #SOR_NV_PDISP_SOR_TMDS_HDCP_CN_MSB
    mov b32 $r11 $r9
    lcall #host1x_dma_write

    // Store the Host1X result code on the stack.
    mov b32 host1x_result $r10
    sub b32 $r9 $r8 0x4
    st b32 D[$r9] host1x_result

    // Make sure the Host1X transfer was successful.
    sub b32 $r9 $r8 0x4
    ld b32 $r9 D[$r9]
    cmp b32 $r9 #HOST1X_DMA_SUCCESS
    bra z #__sor1_set_key_dma_success_3

    // Store the Host1X result code at a different stack offset.
    sub b32 $r9 $r8 0x4
    ld b32 host1x_result D[$r9]
    sub b32 $r14 $r8 0xC
    st b32 D[$r14] host1x_result

    lbra #__sor1_set_key_dma_failure

__sor1_set_key_dma_success_3:
    // Write the fourth word of the key to SOR1.
    sub b32 $r9 $r8 0x8
    ld b32 $r9 D[$r9]
    add b32 $r9 $r9 0xC
    ld b32 $r9 D[$r9]
    mov $r10 #SOR_NV_PDISP_SOR_TMDS_HDCP_CN_LSB
    mov b32 $r11 $r9
    lcall #host1x_dma_write

    // Store the Host1X result code on the stack.
    mov b32 host1x_result $r10
    sub b32 $r9 $r8 0x4
    st b32 D[$r9] host1x_result

    // Store the Host1X result code at a different stack offset.
    sub b32 $r9 $r8 0x4
    ld b32 host1x_result D[$r9]
    sub b32 $r14 $r8 0xC
    st b32 D[$r14] host1x_result

__sor1_set_key_dma_failure:
    // Load the result code into the output register.
    sub b32 $r14 $r8 0xC
    ld b32 $r9 D[$r14]
    mov b32 $r10 $r9

    // Destroy the stack frame.
    mov $sp $r8
    pop $r8

    ret

// End locals
popdef(`host1x_result')

// End function arguments
popdef(`key_buffer')

// Locals
pushdef(`host1x_status', `$r15')

//
// Reads a magic value from HOST1X_CH0_SYNC_SYNCPT_160 and checks it against
// #HOST1X_MAGIC_VALUE to make sure Keygen is loaded from the correct environment.
//
// Returns:
//   $r10 - The result code. Either #HOST1X_MAGIC_VALID or #HOST1X_MAGIC_INVALID.
//
check_host1x_magic:
    // Clear the address for the Host1X DMA result on the stack.
    push $r8
    mov $r8 $sp
    add $sp -0xC
    sub b32 $r15 $r8 0x4
    clear b32 $r9
    st b32 D[$r15] $r9

    // Set a timeout for Host1X DMA transfers.
    mov $r10 0xFFF
    lcall #host1x_dma_set_timeout

    // Store the error result code on the stack.
    sub b32 $r15 $r8 0x8
    mov $r9 #HOST1X_MAGIC_INVALID
    st b32 D[$r15] $r9

    // Read the value of HOST1X_CH0_SYNC_SYNCPT_160 and override the
    // result code on the stack with the value read from it.
    sub b32 $r9 $r8 0x8
    mov $r10 #HOST1X_CH0_SYNC_SYNCPT_160
    mov b32 $r11 $r9
    lcall #host1x_dma_read

    // Save the return value of host1x_dma_read on the stack.
    mov b32 host1x_status $r10
    sub b32 $r9 $r8 0x4
    st b32 D[$r9] host1x_status

    // Make sure that the host1x_dma_read operation was successful.
    sub b32 $r9 $r8 0x4
    ld b32 $r9 D[$r9]
    cmp b32 $r9 #HOST1X_DMA_SUCCESS
    bra z #__check_host1x_magic_dma_success

    // Store the result value from host1x_dma_read at a different stack offset.
    sub b32 $r9 $r8 0x4
    ld b32 $r15 D[$r9]
    sub b32 $r14 $r8 0xC
    st b32 D[$r14] $r15

    lbra #__check_host1x_magic_error

__check_host1x_magic_dma_success:
    // Compare the value that was read over DMA with the expected magic value.
    sub b32 $r9 $r8 0x8
    ld b32 $r15 D[$r9]
    mov $r9 #HOST1X_MAGIC_VALUE
    cmp b32 $r15 $r9
    bra z #__check_host1x_magic_valid_value

    // The check has failed, restore the error code on the stack.
    mov $r14 #HOST1X_MAGIC_INVALID
    sub b32 $r9 $r8 0xC
    st b32 D[$r9] $r14
    lbra #__check_host1x_magic_error

__check_host1x_magic_valid_value:
    // Store zero as the success code on the stack.
    clear b32 $r9
    sub b32 $r15 $r8 0xC
    st b32 D[$r15] $r9

__check_host1x_magic_error:
    // Load the result code into the output register.
    sub b32 $r14 $r8 0xC
    ld b32 $r9 D[$r14]
    mov b32 $r10 $r9

    // Destroy the stack frame.
    mov $sp $r8
    pop $r8

    ret

// End locals
popdef(`host1x_status')
