// Copyright (C) 2020  The Mirage Authors
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// Function arguments
pushdef(`address', `$r10')
pushdef(`value', `$r11')

// Locals
pushdef(`local_address', `$r15')
pushdef(`local_value', `$r9')

//
// A fancy iowr implementation that allocates arguments on the stack for nothing. It really
// lowers down to an iowr primitive using the supplied arguments and that's it.
//
// Arguments:
//   $r10 - The address to write to.
//   $r11 - The value to write.
//
fancy_iowr:
    // Allocate both arguments on the stack.
    push $r8
    mov $r8 $sp
    add $sp -0x8
    sub b32 $r9 $r8 0x4
    st b32 D[$r9] address
    sub b32 $r9 $r8 0x8
    st b32 D[$r9] value

    // Read the arguments from stack back into different registers.
    // (A simple mov would've got the job done too, but well...)
    sub b32 $r9 $r8 0x4
    ld b32 local_address D[$r9]
    sub b32 $r9 $r8 0x8
    ld b32 local_value D[$r9]

    // Write the value to the given address in I/O space.
    iowr I[local_address] local_value

    // Destroy the stack frame.
    mov $sp $r8
    pop $r8

    ret

// End locals
popdef(`local_value')
popdef(`local_address')

// End function arguments
popdef(`value')
popdef(`address')
