// Copyright (C) 2020  The Mirage Authors
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

include(`hs.m4')

.section `#'keygenldr_stage_code _START_ADDR

// Key data offsets
.equ #KEY_DATA_DEBUG_KEY        0x00
.equ #KEY_DATA_BOOT_HASH        0x10
.equ #KEY_DATA_KEYGENLDR_HASH   0x20
.equ #KEY_DATA_KEYGEN_HASH      0x30
.equ #KEY_DATA_KEYGEN_IV        0x40
.equ #KEY_DATA_HOVI_EKS_SEED    0x50
.equ #KEY_DATA_HOVI_COMMON_SEED 0x60
.equ #KEY_DATA_BOOT_SIZE        0x70
.equ #KEY_DATA_KEYGENLDR_SIZE   0x74
.equ #KEY_DATA_KEYGEN_SIZE      0x78

keygenldr_main:
    // Clear the interrupt flag bits.
    bclr $flags ie0
    bclr $flags ie1
    bclr $flags ie2

    // Clear all active DMA overrides.
    cxset 0x80

    // Clear bit 0x13 in the $sec register.
    mov $r14 $cauth
    bclr $r14 0x13
    mov $cauth $r14

    // Set the target port for memory transfers to Falcon DMEM.
    mov $r14 0x0
    mov $xtargets $r14

    // Wait for any code and data loads/stores to finish.
    xdwait
    xcwait

    // Clear any leftover data in crypto register 0.
    cxset 0x2
    mov $r14 0x0
    xdst $r14 $r14
    xdwait

    // Clear all crypto registers, except those that are used for auth.
    PREPARE_HEAVY_SECURE_MODE_ENTRY

    // Clear the TSEC_TEGRA_CTL_TKFI_KFUSE bit in TSEC_TEGRA_CTL.
    mov $r14 #TSEC_TEGRA_CTL
    iord $r15 I[$r14]
    bclr $r15 0x10
    iowr I[$r14] $r15

    // Set the TSEC_SCP_CTL_PKEY_REQUEST_RELOAD bit in TSEC_SCP_CTL_PKEY.
    mov $r14 #TSEC_SCP_CTL_PKEY
    iord $r15 I[$r14]
    bset $r15 0x0
    iowr I[$r14] $r15

keygenldr_main_wait_pkey_loaded:
    // Wait for TSEC_SCP_CTL_PKEY_LOADED to be set in TSEC_SCP_CTL_PKEY.
    iord $r15 I[$r14]
    and $r15 0x2
    bra e #keygenldr_main_wait_pkey_loaded

    // Read the size of the DMEM segment from the I/O space.
    mov $r14 #FALCON_HWCFG
    iord $r14 I[$r14]
    shr b32 $r14 0x9
    and $r14 0x1FF
    shl b32 $r14 0x8

    // Validate the stack boundaries.
    mov $r15 $sp
    cmpu b32 $r15 $r14
    bra ae #keygenldr_main_exit
    cmpu b32 $r15 0x800
    bra b #keygenldr_main_exit

    // Execute the next stage, Keygen.
    mpush $r8
    lcall #load_and_execute_keygen
    mpop $r8

    // Clear the auth signature and the crypto registers.
    PREPARE_HEAVY_SECURE_MODE_EXIT

    // Take the Secure Co-Processor out of lockdown.
    mov $r11 #TSEC_SCP_CTL_LOCK
    mov $r12 0x0
    iowr I[$r11] $r12

    // Return back to the SecureBootLdr code in No Secure Mode.
    ret

keygenldr_main_exit:
    exit

include(`mmio.fuc')
include(`tegra_mmio.fuc')
include(`keygenldr_exec_keygen.fuc')

.align 0x100
